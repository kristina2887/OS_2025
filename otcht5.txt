Создание программы где процесс родитель и процесс ребенок выполняют разные функции

Исходный код программы:

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
int main() {
        pid_t prid, parprid;
        int a = 0, c;
        prid = getpid();
        parprid = getppid();
        printf ("До выполнения fork():\n");
        printf ("Ид. текущего процесса: %d\n", prid);
        printf ("Ид.родительского переменной а: %d\n", a);
        c = fork();
        if (c<0) {
                printf ("Ошибка при вызове fork()\n");
                exit(-1);
        }
        else if (c==0) {
                a = a+1;
                prid = getpid();
                parprid = getppid();
                printf ("После выполнения fork(): \n");
                printf ("Ид. текущего процесса: %d\n", prid);
                printf ("Ид. родительского процесса: %d\n", parprid);
                printf ("Значение переменной a: %d",a);
        }
        else {
                printf ("ВЫполнение родительского процесса, порожден процесс с ид. %d", c);
                a =  a+1000;
                prid = getpid();
                parprid = getppid();
                printf("После выполнения fork() для родительского процесса:\n");
                printf("Ид. текущего процесса: %d\nИд родиетельского процесса: %d\n", prid, parprid);
                printf("Значение переменной a: %d\n", a);
        }
        return 0;
}

Результат выполнения программы:

До выполнения fork():
Ид. текущего процесса: 13317
Ид.родительского переменной а: 0
ВЫполнение родительского процесса, порожден процесс с ид. 13318После выполнения fork() для родительского процесса:
Ид. текущего процесса: 13317
Ид родиетельского процесса: 13293
Значение переменной a: 1000
После выполнения fork():
Ид. текущего процесса: 13318
Ид. родительского процесса: 13317
Значение переменной a: 1

Выводы:
Переменная a в родительском и в дочернем процессе незаивисимы друг от друга, так как распологаются в разном адресном пространстве
Переменнные, где храняться индетификаторы родительского и дочернего процессов также независимы дрцуг от друга
Родительский процесс получает значение 0, возвращение системным вызовом fork()инденификатор своего дочернего процесса
Доячерний процесс получает значение 0, возвращаемое системным вызовом fork() 
